
LENOVO@jeevi MINGW64 /d/Git_checkout
$ vim fle1.txt

LENOVO@jeevi MINGW64 /d/Git_checkout
$ git init
Initialized empty Git repository in D:/Git_checkout/.git/

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ git add .
warning: in the working copy of 'fle1.txt', LF will be replaced by CRLF the next time Git touches it

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ git commit -m 'first commit'
[master (root-commit) 1af5829] first commit
 1 file changed, 2 insertions(+)
 create mode 100644 fle1.txt

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ cat file1.txt
cat: file1.txt: No such file or directory

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ cat fle1.txt
FirstLine
SecondLine

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ vim fle1.txt

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ cat fle1.txt
FirstLine
SecondLine
3line
4line

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ git checkout --fle1.txt
error: unknown option `fle1.txt'
usage: git checkout [<options>] <branch>
   or: git checkout [<options>] [<branch>] -- <file>...

    -b <branch>           create and checkout a new branch
    -B <branch>           create/reset and checkout a branch
    -l                    create reflog for new branch
    --guess               second guess 'git checkout <no-such-branch>' (default)
    --overlay             use overlay mode (default)
    -q, --quiet           suppress progress reporting
    --recurse-submodules[=<checkout>]
                          control recursive updating of submodules
    --progress            force progress reporting
    -m, --merge           perform a 3-way merge with the new branch
    --conflict <style>    conflict style (merge, diff3, or zdiff3)
    -d, --detach          detach HEAD at named commit
    -t, --track[=(direct|inherit)]
                          set branch tracking configuration
    -f, --force           force checkout (throw away local modifications)
    --orphan <new-branch>
                          new unparented branch
    --overwrite-ignore    update ignored files (default)
    --ignore-other-worktrees
                          do not check if another worktree is holding the given ref
    -2, --ours            checkout our version for unmerged files
    -3, --theirs          checkout their version for unmerged files
    -p, --patch           select hunks interactively
    --ignore-skip-worktree-bits
                          do not limit pathspecs to sparse entries only
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character


LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ git checkout -- fle1.txt

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ cat fle1.txt
FirstLine
SecondLine

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ vim fle2.txt

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$ git checkout -- fle2.txt
error: pathspec 'fle2.txt' did not match any file(s) known to git

LENOVO@jeevi MINGW64 /d/Git_checkout (master)
$
